<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.post.mapper.PostMapper">

    <resultMap id="PostResultMap" type="com.example.demo.post.model.Post">
        <id     property="postId"    column="post_id"/>
        <result property="userId"    column="user_id"/>
        <result property="title"     column="title"/>
        <result property="content"   column="content"/>
        <result property="category"  column="category"/>
        <result property="viewCount" column="view_count"/>
        <result property="isActive"  column="is_active"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <insert id="insertPost" parameterType="com.example.demo.post.model.Post"
            useGeneratedKeys="true" keyProperty="postId" keyColumn="post_id">
        INSERT INTO post (user_id, title, content, category, view_count, is_active)
        VALUES (#{userId}, #{title}, #{content}, #{category}, 0, true)
    </insert>

    <insert id="insertPostTagBatch">
        INSERT INTO post_tag (post_id, tag)
        VALUES
        <foreach collection="tags" item="t" separator=",">
            (#{postId}, #{t})
        </foreach>
    </insert>

    <select id="selectPosts" resultMap="PostResultMap">
        SELECT p.*
        FROM post p
        WHERE p.is_active = TRUE
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectPostById" parameterType="int"
            resultMap="PostResultMap">
        SELECT p.*
        FROM post p
        WHERE p.post_id = #{postId}
    </select>

    <select id="selectTagsByPostId" parameterType="int" resultType="string">
        SELECT tag FROM post_tag WHERE post_id = #{postId} ORDER BY tag
    </select>

    <select id="selectPostsWithStats" resultType="com.example.demo.post.dto.PostWithStatsResponse">
        SELECT
        p.post_id              AS id,
        p.user_id              AS userId,
        p.title                AS title,
        p.content              AS content,
        p.category             AS category,
        p.view_count           AS viewCount,
        p.is_active            AS isActive,
        p.created_at           AS createdAt,
        p.updated_at           AS updatedAt,
        u.username   AS author,
        (SELECT COUNT(*) FROM post_like pl WHERE pl.post_id = p.post_id) AS likes,
        (SELECT COUNT(*) FROM comment c WHERE c.post_id = p.post_id) AS comments,
        CASE
        WHEN #{viewerId} IS NULL THEN 0
        ELSE EXISTS (
        SELECT 1 FROM post_like x
        WHERE x.post_id = p.post_id AND x.user_id = #{viewerId}
        )
        END AS liked,
        CASE
        WHEN #{viewerId} IS NULL THEN 0
        ELSE EXISTS (
        SELECT 1 FROM post_bookmark b
        WHERE b.post_id = p.post_id AND b.user_id = #{viewerId}
        )
        END AS bookmarked

        FROM post p
        LEFT JOIN users u ON u.user_id = p.user_id
        WHERE p.is_active = 1
        ORDER BY p.post_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectPostByIdWithStats" resultType="com.example.demo.post.dto.PostWithStatsResponse">
        SELECT
        p.post_id              AS id,
        p.user_id              AS userId,
        p.title                AS title,
        p.content              AS content,
        p.category             AS category,
        p.view_count           AS viewCount,
        p.is_active            AS isActive,
        p.created_at           AS createdAt,
        p.updated_at           AS updatedAt,
        u.username   AS author,
        (SELECT COUNT(*) FROM post_like pl WHERE pl.post_id = p.post_id) AS likes,
        (SELECT COUNT(*) FROM comment c   WHERE c.post_id = p.post_id)   AS comments,
        CASE
        WHEN #{viewerId} IS NULL THEN 0
        ELSE EXISTS (
        SELECT 1 FROM post_like x
        WHERE x.post_id = p.post_id AND x.user_id = #{viewerId}
        )
        END AS liked,
        CASE
        WHEN #{viewerId} IS NULL THEN 0
        ELSE EXISTS (
        SELECT 1 FROM post_bookmark b
        WHERE b.post_id = p.post_id AND b.user_id = #{viewerId}
        )
        END AS bookmarked

        FROM post p
        LEFT JOIN users u ON u.user_id = p.user_id
        WHERE p.post_id = #{postId}
        LIMIT 1
    </select>

    <update id="increaseViewCount" parameterType="int">
        UPDATE post
        SET view_count = view_count + 1
        WHERE post_id = #{postId}
    </update>

    <select id="selectMyProfile" resultType="com.example.demo.auth.dto.MyPageProfileResponse">
        SELECT
        u.user_id    AS userId,
        u.username   AS username,
        u.email      AS email,
        u.created_at AS joinDate,
        (SELECT COUNT(*) FROM post p WHERE p.user_id = u.user_id) AS postCount,
        (SELECT COUNT(*) FROM post_like pl WHERE pl.user_id = u.user_id) AS likeCount,
        (SELECT COUNT(*) FROM post_bookmark pb WHERE pb.user_id = u.user_id) AS scrapCount
        FROM users u
        WHERE u.user_id = #{userId}
    </select>

    <sql id="postWithStatsColumns">
        p.post_id          AS id,
        p.user_id          AS userId,
        p.title,
        p.content,
        p.category,
        p.view_count       AS viewCount,
        p.is_active        AS isActive,
        p.created_at       AS createdAt,
        p.updated_at       AS updatedAt,
        u.username         AS author,
        COALESCE(lc.cnt,0) AS likesCount,
        COALESCE(cc.cnt,0) AS commentsCount,
        CASE WHEN vpl.user_id IS NULL THEN 0 ELSE 1 END AS liked,
        CASE WHEN vpb.user_id IS NULL THEN 0 ELSE 1 END AS bookmarked
    </sql>

    <select id="selectPostsByAuthorWithStats" resultType="com.example.demo.post.dto.PostWithStatsResponse">
        SELECT
        <include refid="postWithStatsColumns"/>
        FROM post p
        JOIN users u ON u.user_id = p.user_id
        LEFT JOIN (SELECT post_id, COUNT(*) cnt FROM post_like GROUP BY post_id) lc ON lc.post_id = p.post_id
        LEFT JOIN (SELECT post_id, COUNT(*) cnt FROM comment   GROUP BY post_id) cc ON cc.post_id = p.post_id
        LEFT JOIN post_like     vpl ON vpl.post_id = p.post_id AND vpl.user_id = #{viewerId}
        LEFT JOIN post_bookmark vpb ON vpb.post_id = p.post_id AND vpb.user_id = #{viewerId}
        WHERE p.user_id = #{authorId}
        ORDER BY p.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectPostsLikedByUserWithStats" resultType="com.example.demo.post.dto.PostWithStatsResponse">
        SELECT
        <include refid="postWithStatsColumns"/>
        FROM post_like pl
        JOIN post p   ON p.post_id = pl.post_id
        JOIN users u  ON u.user_id = p.user_id
        LEFT JOIN (SELECT post_id, COUNT(*) cnt FROM post_like GROUP BY post_id) lc ON lc.post_id = p.post_id
        LEFT JOIN (SELECT post_id, COUNT(*) cnt FROM comment   GROUP BY post_id) cc ON cc.post_id = p.post_id
        LEFT JOIN post_like     vpl ON vpl.post_id = p.post_id AND vpl.user_id = #{viewerId}
        LEFT JOIN post_bookmark vpb ON vpb.post_id = p.post_id AND vpb.user_id = #{viewerId}
        WHERE pl.user_id = #{likerId}
        ORDER BY pl.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectPostsBookmarkedByUserWithStats" resultType="com.example.demo.post.dto.PostWithStatsResponse">
        SELECT
        <include refid="postWithStatsColumns"/>
        FROM post_bookmark pb
        JOIN post p   ON p.post_id = pb.post_id
        JOIN users u  ON u.user_id = p.user_id
        LEFT JOIN (SELECT post_id, COUNT(*) cnt FROM post_like GROUP BY post_id) lc ON lc.post_id = p.post_id
        LEFT JOIN (SELECT post_id, COUNT(*) cnt FROM comment   GROUP BY post_id) cc ON cc.post_id = p.post_id
        LEFT JOIN post_like     vpl ON vpl.post_id = p.post_id AND vpl.user_id = #{viewerId}
        LEFT JOIN post_bookmark vpb ON vpb.post_id = p.post_id AND vpb.user_id = #{viewerId}
        WHERE pb.user_id = #{collectorId}
        ORDER BY pb.created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="findAuthorIdByPostId" parameterType="int" resultType="int">
        SELECT user_id
        FROM post
        WHERE post_id = #{postId}
    </select>

    <delete id="deletePost" parameterType="int">
        DELETE FROM post
        WHERE post_id = #{postId}
    </delete>

</mapper>