<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.auth.mapper.UserMapper">

    <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="com.example.demo.auth.model.User" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO users (username, email, password, role, is_active, created_at, updated_at)
        VALUES (#{username}, #{email}, #{password}, #{role}, #{isActive}, NOW(), NOW())
    </insert>

    <!-- 사용자명으로 사용자 조회 -->
    <select id="findByUsername" resultType="com.example.demo.auth.model.User">
        SELECT user_id, username, email, password, role, is_active, created_at, updated_at
        FROM users
        WHERE username = #{username}
    </select>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" resultType="com.example.demo.auth.model.User">
        SELECT user_id, username, email, password, role, is_active, created_at, updated_at
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 사용자 ID로 사용자 조회 -->
    <select id="findByUserId" resultType="com.example.demo.auth.model.User">
        SELECT user_id, username, email, password, role, is_active, created_at, updated_at
        FROM users
        WHERE user_id = #{userId}
    </select>

    <!-- 모든 사용자 조회 -->
    <select id="findAllUsers" resultType="com.example.demo.auth.model.User">
        SELECT user_id, username, email, password, role, is_active, created_at, updated_at
        FROM users
        ORDER BY created_at DESC
    </select>

    <!-- 사용자 정보 업데이트 -->
    <update id="updateUser" parameterType="com.example.demo.auth.model.User">
        UPDATE users
        SET username = #{username},
            email = #{email},
            password = #{password},
            role = #{role},
            is_active = #{isActive},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteUser">
        DELETE FROM users
        WHERE user_id = #{userId}
    </delete>

    <!-- 사용자명 중복 확인 -->
    <select id="existsByUsername" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE username = #{username}
    </select>

    <!-- 이메일 중복 확인 -->
    <select id="existsByEmail" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users
        WHERE email = #{email}
    </select>

    <select id="findIdByUsername" parameterType="string" resultType="int">
        SELECT user_id
        FROM users
        WHERE username = #{username}
        LIMIT 1
    </select>

</mapper>
